import {
  dedent
} from "./chunk-JLBFQ2EK.js";
import {
  require_global
} from "./chunk-62Y44TTL.js";
import {
  __export
} from "./chunk-T5J5FPR2.js";
import {
  ya
} from "./chunk-Q55IIAFO.js";
import {
  require_preview_api
} from "./chunk-ZLWVYHQP.js";
import {
  __toESM
} from "./chunk-7D4SUZUM.js";

// node_modules/@storybook/html/dist/chunk-ZBAUHALS.mjs
var import_global = __toESM(require_global(), 1);
var import_preview_api = __toESM(require_preview_api(), 1);
var entry_preview_exports = {};
__export(entry_preview_exports, { argTypesEnhancers: () => argTypesEnhancers, parameters: () => parameters, render: () => render, renderToCanvas: () => renderToCanvas });
var { Node } = import_global.global;
var render = (args, context) => {
  let { id, component: Component } = context;
  if (typeof Component == "string") {
    let output = Component;
    return Object.keys(args).forEach((key) => {
      output = output.replace(`{{${key}}}`, args[key]);
    }), output;
  }
  if (Component instanceof HTMLElement) {
    let output = Component.cloneNode(true);
    return Object.keys(args).forEach((key) => {
      output.setAttribute(key, typeof args[key] == "string" ? args[key] : JSON.stringify(args[key]));
    }), output;
  }
  if (typeof Component == "function") return Component(args, context);
  throw console.warn(dedent`
    Storybook's HTML renderer only supports rendering DOM elements and strings.
    Received: ${Component}
  `), new Error(`Unable to render story ${id}`);
};
function renderToCanvas({ storyFn, kind, name, showMain, showError, forceRemount }, canvasElement) {
  let element = storyFn();
  if (showMain(), typeof element == "string") canvasElement.innerHTML = element, (0, import_preview_api.simulatePageLoad)(canvasElement);
  else if (element instanceof Node) {
    if (canvasElement.firstChild === element && forceRemount === false) return;
    canvasElement.innerHTML = "", canvasElement.appendChild(element), (0, import_preview_api.simulateDOMContentLoaded)();
  } else showError({ title: `Expecting an HTML snippet or DOM node from the story: "${name}" of "${kind}".`, description: dedent`
        Did you forget to return the HTML snippet from the story?
        Use "() => <your snippet or node>" or when defining the story.
      ` });
}
var parameters = { renderer: "html" };
var argTypesEnhancers = [ya];

export {
  entry_preview_exports,
  render,
  renderToCanvas,
  parameters,
  argTypesEnhancers
};
//# sourceMappingURL=chunk-73FK346N.js.map
